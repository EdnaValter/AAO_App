@model IEnumerable<AAO_App.ModelView.CalendarModelView>
@using Microsoft.AspNetCore.Http;
@{
    ViewData["Title"] = "Rådighedkalendar";
    Layout = "_Master";
}

<div class="calendar_container">
    <div class="headingtext">
        <h1>Rådighedskalendar</h1>
    </div>
    <div class="type">
        <div class="leftred">
            <button class="red"></button>Optaget
        </div>
        <div class="rightgreen">
            <button class="green"></button>Ledig
        </div>
        <div class="create">
            <a asp-action="Create"><i style="font-size:18px" class="fa">&#xf055;</i>Opret</a>
        </div>
    </div>

    <div class="calendar">
        <div class="month">
            <i style="font-size:24px" class="fa prev">&#xf104;</i>
            <div class="date">
                <h2></h2>
                <p></p>
            </div>
            <i style="font-size:24px" class="fa next">&#xf105;</i>
        </div>
        <div class="weekdays">
            <div>Sø</div>
            <div>Ma</div>
            <div>Ti</div>
            <div>On</div>
            <div>To</div>
            <div>Fr</div>
            <div>Lø</div>
        </div>
        <div class="days" id="CalendarDays">

        </div>
    </div>
</div>

<div style="display:none">
    <script>var markDateList = [];</script>
    @foreach (var item in Model)
    {

        int thisUserId = Int32.Parse(Context.Session.GetString("DriverId"));
        if (thisUserId == item.DriverId && item.Status == Status.Approved || item.Status == Status.Available)
        {

            <div class="@string.Concat(new string[] {"avl", item.Status.ToString()})">
                <p>
                    @item.DateStart.ToString("dd/MM/yyyy")
                </p>
                <p>
                    @item.DateEnd.ToString("dd/MM/yyyy")
                    <script>
                    var days = @((item.DateEnd.Date - item.DateStart.Date).Days) ;
                    while (days >= 0) {
                        var i = 0;
                        if ("@item.Status" == "Approved")
                            i = 1;

                                markDateList.push(i + "" + new Date(@item.DateStart.Date.Year , @item.DateStart.Date.Month-1, (@item.DateStart.Date.Day + days)).getTime());
                                days--;
                            }
                    </script>
                </p>
            </div>
        }
    }
</div>


<script>
    // get date
    const date = new Date();

    // render calendar
    const renderCalendar = () => {
        date.setDate(1);

        const monthDays = document.querySelector(".days");

        const lastDay = new Date(
            date.getFullYear(),
            date.getMonth() + 1,
            0
        ).getDate();

        const prevLastDay = new Date(
            date.getFullYear(),
            date.getMonth(),
            0
        ).getDate();

        const firstDayIndex = date.getDay();

        //getting fullyear + month
        const lastDayIndex = new Date(
            date.getFullYear(),
            date.getMonth() + 1,
            0
        ).getDay();

        const nextDays = 7 - lastDayIndex - 1;

        const months = [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
        ];
        //Show Header Calendar Month
        document.querySelector(".date h2").innerHTML = months[date.getMonth()];
        // show day, month, date and year
        document.querySelector(".date p").innerHTML = new Date().toDateString();

        //getting calendar
        let days = "";

        for (let x = firstDayIndex; x > 0; x--) {
            days += `<div class="prev-date">${prevLastDay - x + 1}</div>`;
        }

        for (let i = 1; i <= lastDay; i++) {
            if (i === new Date().getDate() && date.getMonth() === new Date().getMonth()) {
                days += `<div class="today">${i}</div>`;

            } else if (markDateList.includes("0" + new Date(date.getYear() + 1900, date.getMonth(), i).getTime())) {

                days += `<div class="lists">${i}</div>`;
            } else if (markDateList.includes("1" + new Date(date.getYear() + 1900, date.getMonth(), i).getTime())) {

                days += `<div class="listsred">${i}</div>`;
            }
            else {
                days += `<div>${i}</div>`;
            }
        }

        for (let j = 1; j <= nextDays; j++) {
            days += `<div class="next-date">${j}</div>`;
            monthDays.innerHTML = days;
        }
    };
    // previous arrow
    document.querySelector(".prev").addEventListener("click", () => {
        date.setMonth(date.getMonth() - 1);
        renderCalendar();
    });
    // next arrow
    document.querySelector(".next").addEventListener("click", () => {
        date.setMonth(date.getMonth() + 1);
        renderCalendar();
    });

    renderCalendar();

    //pure JS
    function scrollToBottom(div) {
        var div = document.getElementById('table');
        div.scrollTop = div.scrollHeight - div.clientHeight;
    }

</script>

